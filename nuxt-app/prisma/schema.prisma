// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
//  output   = "../lib/generated/prisma"

generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  apikey    String?
  name      String?
  password  String
  roles     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
  tasks     Task[]
}

model CompanyBase {
  id          Int      @id @default(autoincrement())
  fullName    String?
  shortName   String?
  status      String?
  country     String?
  email       String?
  site        String?
  unp         String?   @unique
  address     String?
  phones      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)
}

model Company {
  id          Int      @id @default(autoincrement())
  name        String
  unp         String?   @unique
  address     String?
  city        String?
  site        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  contactPersons ContactPerson[]
  courtCasesAsClaimant  CourtCase[] @relation("ClaimantCompany")
  courtCasesAsDebtor    CourtCase[] @relation("DebtorCompany")
  sentSms     SentSms[]
  sentEmails  SentEmail[]
  notes        String?
  track        Boolean? @default(false)
  aliases      Json?
  tasks       Task[]
}

model ContactPerson {
  id        Int      @id @default(autoincrement())
  name      String
  company   Company @relation(fields: [companyId], references: [id])
  companyId Int
  phones    Phone[]
  emails    Email[]
  source    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
  tasks     Task[]
}

model Phone {
  id              Int      @id @default(autoincrement())
  number          String
  contactPerson   ContactPerson @relation(fields: [contactPersonId], references: [id])
  contactPersonId Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  isDeleted       Boolean  @default(false)
  tasks           Task[]
}

model Email {
  id              Int      @id @default(autoincrement())
  address         String
  contactPerson   ContactPerson @relation(fields: [contactPersonId], references: [id])
  contactPersonId Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  isDeleted       Boolean  @default(false)
}

model CourtCase {
  id               Int      @id @default(autoincrement())
  uuid             String   @unique
  claimant         String   // Взыскатель
  claimantCompany  Company? @relation("ClaimantCompany", fields: [claimantCompanyId], references: [id])
  claimantCompanyId Int?
  debtor           String   // Должник
  debtorCompany    Company? @relation("DebtorCompany", fields: [debtorCompanyId], references: [id])
  debtorCompanyId  Int?
  caseNumber       String?   // № дела
  incomingNumber   String   // Вх. №
  receiptDate      DateTime? // Дата поступления
  debtAmount       Float?    // Сумма долга
  decision         String?   // Решение о принятии заявления
  courtName        String   // Наименование суда
  triedToParse     Boolean? @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  isDeleted        Boolean  @default(false)
  notes            String?
  track            Boolean? @default(false)
  tasks            Task[]
}

model ChannelCategory {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
  smsTemplates SmsTemplate[]
  emailTemplates EmailTemplate[]
}

model SmsTemplate {
  id        Int      @id @default(autoincrement())
  name      String
  content   String
  channelCategory ChannelCategory @relation(fields: [channelCategoryId], references: [id])
  channelCategoryId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
  sentSms    SentSms[]
  messageChains MessageChain[]
}

model EmailTemplate {
  id        Int      @id @default(autoincrement())
  name      String
  subject   String
  content   String
  format    String   @default("plaintext") // "html" or "plaintext"
  channelCategory ChannelCategory @relation(fields: [channelCategoryId], references: [id])
  channelCategoryId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
  sentEmails SentEmail[]
  messageChains MessageChain[]
}

model MessageChain {
  id        Int      @id @default(autoincrement())
  name      String
  description String?
  chains    Json?    // [{templateId: number, type: 'email'|'sms', daysOffset: number}]
  smsTemplates SmsTemplate[]
  emailTemplates EmailTemplate[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
}

model SentSms {
  id        Int      @id @default(autoincrement())
  phone     String
  content   String
  template  SmsTemplate? @relation(fields: [templateId], references: [id])
  templateId Int?
  company   Company? @relation(fields: [companyId], references: [id])
  companyId Int?
  externalId String?
  status    String?
  channel   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
}

model SentEmail {
  id        Int      @id @default(autoincrement())
  email     String
  subject   String
  content   String
  template  EmailTemplate? @relation(fields: [templateId], references: [id])
  templateId Int?
  company   Company? @relation(fields: [companyId], references: [id])
  companyId Int?
  externalId String?
  status    String?
  channel   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
}

model TaskAction {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
  tasks     Task[]
}

model Task {
  id              Int         @id @default(autoincrement())
  title           String
  description     String?
  action          TaskAction  @relation(fields: [actionId], references: [id])
  actionId        Int
  status          String      @default("pending") // pending, completed, cancelled
  scheduledAt     DateTime?
  completedAt     DateTime?
  courtCase       CourtCase?  @relation(fields: [courtCaseId], references: [id])
  courtCaseId     Int?
  company         Company     @relation(fields: [companyId], references: [id])
  companyId       Int
  contactPerson   ContactPerson @relation(fields: [contactPersonId], references: [id])
  contactPersonId Int
  phone           Phone       @relation(fields: [phoneId], references: [id])
  phoneId         Int
  assignedTo      User        @relation(fields: [assignedToId], references: [id])
  assignedToId    Int
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  isDeleted       Boolean     @default(false)
}
